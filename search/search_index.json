{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Documentation: https://fastapi-practices.github.io/sqlalchemy-crud-plus</p> <p>Source Code: https://github.com/fastapi-practices/sqlalchemy-crud-plus</p>"},{"location":"#installing","title":"Installing","text":"pippdmuv <pre><code>pip install sqlalchemy-crud-plus\n</code></pre> <pre><code>pdm add sqlalchemy-crud-plus\n</code></pre> <pre><code>uv add sqlalchemy-crud-plus\n</code></pre>"},{"location":"#_1","title":"\u793a\u4f8b","text":"api.pymodel.pyschema.py crud.pyservice.py <pre><code>from typing import Annotated\n\nfrom fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get('/{pk}', summary=\"\u83b7\u53d6\u5b9e\u4f8b\")\nasync def get_ins(pk: Annotated[int, Path(...)]) -&gt; InsParam:\n    ins = await ins_service.get_ins()\n    return InsParam(ins)\n</code></pre> <pre><code>from sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\n\nclass ModelIns(Base):\n    # sqlalchemy model\n    pass\n</code></pre> <pre><code>from pydantic import BaseModel\n\n\nclass InsParam(BaseModel):\n    # field\n    pass\n</code></pre> <pre><code>from sqlalchemy.ext.asyncio import AsyncSession\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\n\n# \u5728\u4f7f\u7528 IDE \u65f6\uff0c\u4f20\u5165\u7c7b\u53c2\u6570\uff0c\u5c06\u83b7\u5f97\u66f4\u53cb\u597d\u7684\u952e\u5165\u63d0\u793a\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def get(self, db: AsyncSession, pk: int) -&gt; ModelIns:\n        return await self.select_model(db, pk)\n\nins_dao: CRUDIns = CRUDIns(ModelIns)\n</code></pre> <pre><code>class InsService:\n    async def get_ins():\n        async with async_db_session(pk: int) as db:\n            ins = ins_dao.get(db, pk)\n\nins_service = InsService()\n</code></pre>"},{"location":"#_2","title":"\u4e92\u52a8","text":"<p>TG / Discord</p>"},{"location":"#_3","title":"\u8d5e\u52a9","text":"<p>\u5982\u679c\u6b64\u9879\u76ee\u80fd\u591f\u5e2e\u52a9\u5230\u4f60\uff0c\u4f60\u53ef\u4ee5\u8d5e\u52a9\u4f5c\u8005\u4e00\u4e9b\u5496\u5561\u8c46\u8868\u793a\u9f13\u52b1\uff1aSponsor</p>"},{"location":"changelog/","title":"Change Logs","text":""},{"location":"changelog/#160-2024-11-09","title":"1.6.0 - 2024-11-09","text":""},{"location":"changelog/#whats-changed","title":"What's Changed","text":"<ul> <li>Add the flush usage by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/32</li> <li>Prepare for 1.6.0 release by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/33</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.5.0...1.6.0</p>"},{"location":"changelog/#150-2024-11-03","title":"1.5.0 - 2024-11-03","text":""},{"location":"changelog/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Update some usage documents by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/27</li> <li>Update the interactive link address by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/28</li> <li>update interactive link descriptions by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/29</li> <li>Update package manager pdm to uv by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/31</li> <li>Add create and update kwargs usage by @wu-clan in https://github.com/fastapi-practices/sqlalchemy-crud-plus/pull/30</li> </ul> <p>Full Changelog: https://github.com/fastapi-practices/sqlalchemy-crud-plus/compare/1.4.0...1.5.0</p>"},{"location":"installing/","title":"Installing","text":""},{"location":"installing/#_1","title":"\u4f9d\u8d56","text":"<p>\u5728\u5b89\u88c5 sqlalchemy-crud-plus \u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u6ee1\u8db3\u4ee5\u4e0b\u5148\u51b3\u6761\u4ef6\uff1a</p> <ul> <li>Python: \u7248\u672c 3.10 \u6216\u66f4\u9ad8</li> <li>SQLAlchemy: sqlalchemy-crud-plus \u4f7f\u7528 SQLAlchemy 2.0 \u8fdb\u884c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u56e0\u6b64\u60a8\u9700\u8981 SQLAlchemy 2.0 \u6216\u66f4\u9ad8\u7248\u672c</li> </ul>"},{"location":"installing/#_2","title":"\u5b89\u88c5","text":"pippdmuv <pre><code>pip install sqlalchemy-crud-plus\n</code></pre> <pre><code>pdm add sqlalchemy-crud-plus\n</code></pre> <pre><code>uv add sqlalchemy-crud-plus\n</code></pre>"},{"location":"advanced/commit/","title":"\u63d0\u4ea4","text":"<p>SQLAlchemy CRUD Plus \u5185\u90e8\u5f88\u591a\u65b9\u6cd5\u90fd\u63d0\u4f9b\u4e86 <code>commit</code> \u53c2\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>False</code>\uff0c\u5b83\u65e2\u4e0d\u4f1a\u6267\u884c\u63d0\u4ea4\u64cd\u4f5c\uff0c\u4e5f\u4e0d\u5305\u542b <code>flush</code> \u7b49\u884c\u4e3a\uff0c\u8981\u60f3\u771f\u6b63\u5199\u5165\u5230\u6570\u636e\u5e93\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6848</p>"},{"location":"advanced/commit/#committrue","title":"<code>commit=True</code>","text":"<p>\u8fd9\u901a\u5e38\u9002\u7528\u4e8e\u624b\u52a8\u521b\u5efa\u7684 session \u751f\u6210\u5668, SQLAlchemy CRUD Plus \u5c06\u5728\u5185\u90e8\u81ea\u52a8\u6267\u884c\u63d0\u4ea4</p> <pre><code>from fastapi import FastAPI, Depends\n\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\n\nasync_engine = create_async_engine('\u6570\u636e\u5e93\u8fde\u63a5', future=True)\nasync_db_session = async_sessionmaker(async_engine, autoflush=False, expire_on_commit=False)\n\n\nasync def get_db() -&gt; AsyncSession:\n    \"\"\"\n    session \u751f\u6210\u5668\n    \"\"\"\n    session = async_db_session()\n    try:\n        yield session\n    except Exception as se:\n        await session.rollback()\n        raise se\n    finally:\n        await session.close()\n\napp = FastAPI()\n\n\nclass CreateIns(BaseModel):\n    # your pydantic schema\n    pass\n\n\n@app.post('/api', summary='\u65b0\u589e\u4e00\u6761\u6570\u636e')\nasync def create(self, obj: CreateIns, db: AsyncSession = Depends(get_db)) -&gt; None:\n    await self.create_model(db, obj, commit=True)\n</code></pre>"},{"location":"advanced/commit/#begin","title":"<code>begin()</code>","text":"<p>\u9002\u7528\u4e8e\u81ea\u52a8\u63d0\u4ea4\uff0c\u8fd9\u4e00\u5207\u90fd\u7531 sqlalchemy \u5728\u5185\u90e8\u5b8c\u6210 \uff0c\u56e0\u6b64\uff0c\u7528\u6237\u65e0\u9700\u91cd\u590d\u8c03\u7528 commit \u65b9\u6cd5</p> <pre><code>from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine\n\nasync_engine = create_async_engine('\u6570\u636e\u5e93\u8fde\u63a5', future=True)\nasync_db_session = async_sessionmaker(async_engine, autoflush=False, expire_on_commit=False)\n\n\nasync def create(self, obj: CreateIns) -&gt; None:\n    async with async_db_session.begin() as db:\n        await self.create_model(db, obj)\n</code></pre>"},{"location":"advanced/filter/","title":"\u6761\u4ef6\u8fc7\u6ee4","text":"<p>SQLAlchemy CRUD Plus \u652f\u6301\u9ad8\u7ea7\u8fc7\u6ee4\u9009\u9879\uff0c\u5141\u8bb8\u4f7f\u7528\u8fd0\u7b97\u7b26\u67e5\u8be2\u8bb0\u5f55\uff0c\u5982\u5927\u4e8e\uff08<code>__gt</code>\uff09\u3001\u5c0f\u4e8e\uff08<code>__lt</code>\uff09\uff1b</p> <p>\u5927\u591a\u6570\u8fc7\u6ee4\u5668\u64cd\u4f5c\u7b26\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\u6216\u6574\u6570\u503c</p> <pre><code># \u83b7\u53d6\u5e74\u9f84\u5927\u4e8e 30 \u5c81\u4ee5\u4e0a\u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    age__gt=30,\n)\n</code></pre>"},{"location":"advanced/filter/#_1","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26","text":"<ul> <li><code>__gt</code>\uff1a\u5927\u4e8e</li> <li><code>__lt</code>\uff1a\u5c0f\u4e8e</li> <li><code>__ge</code>\uff1a\u5927\u4e8e\u6216\u7b49\u4e8e</li> <li><code>__le</code>\uff1a\u5c0f\u4e8e\u6216\u7b49\u4e8e</li> <li><code>__eq</code>: \u7b49\u4e8e</li> <li><code>__ne</code>: \u4e0d\u7b49\u4e8e</li> <li><code>__between</code>: \u5728\u4e24\u8005\u4e4b\u95f4</li> </ul>"},{"location":"advanced/filter/#in","title":"IN \u6bd4\u8f83","text":"<ul> <li><code>__in</code>: \u5305\u542b</li> <li><code>__not_in</code>: \u4e0d\u5305\u62ec</li> </ul>"},{"location":"advanced/filter/#_2","title":"\u8eab\u4efd\u6bd4\u8f83","text":"<ul> <li><code>__is</code>\uff1a\u7528\u4e8e\u6d4b\u8bd5 \u201c\u771f\u201d\u3001\u201c\u5047\u201d \u548c \u201c\u65e0\u201d\u3002</li> <li><code>__is_not</code>\uff1a\u201cis\u201d \u7684\u5426\u5b9a</li> <li><code>__is_distinct_from</code>: \u4ea7\u751f SQL IS DISTINCT FROM</li> <li><code>__is_not_distinct_from</code>: Produces SQL IS NOT DISTINCT FROM</li> <li><code>__like</code>\uff1a\u9488\u5bf9\u7279\u5b9a\u6587\u672c\u6a21\u5f0f\u7684 SQL \u201clike\u201d \u641c\u7d22</li> <li><code>__not_like</code>\uff1a\u201clike\u201d \u7684\u5426\u5b9a</li> <li><code>__ilike</code>\uff1a\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684 \u201clike\u201d</li> <li><code>__not_ilike</code>\uff1a\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684 \u201cnot_like\u201d</li> </ul>"},{"location":"advanced/filter/#_3","title":"\u5b57\u7b26\u4e32\u6bd4\u8f83","text":"<ul> <li><code>__startswith</code>\uff1a\u6587\u672c\u4ee5\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u5f00\u59cb</li> <li><code>__endswith</code>\uff1a\u6587\u672c\u4ee5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7ed3\u675f</li> <li><code>__contains</code>\uff1a\u6587\u672c\u5305\u542b\u7ed9\u5b9a\u5b57\u7b26\u4e32</li> </ul>"},{"location":"advanced/filter/#_4","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":"<ul> <li><code>__match</code>\uff1a\u7279\u5b9a\u4e8e\u6570\u636e\u5e93\u7684\u5339\u914d\u8868\u8fbe\u5f0f</li> </ul>"},{"location":"advanced/filter/#_5","title":"\u5b57\u7b26\u4e32\u4fee\u6539","text":"<ul> <li><code>__concat</code>: \u5b57\u7b26\u4e32\u8fde\u63a5</li> </ul>"},{"location":"advanced/filter/#_6","title":"\u7b97\u672f\u8fd0\u7b97\u7b26","text":"<p>\u6b64\u8fc7\u6ee4\u5668\u4f7f\u7528\u65b9\u6cd5\u9700\u67e5\u770b\uff1a\u7b97\u6570</p> <ul> <li><code>__add</code>: Python <code>+</code> \u8fd0\u7b97\u7b26</li> <li><code>__radd</code>: Python <code>+</code> \u53cd\u5411\u8fd0\u7b97</li> <li><code>__sub</code>: Python <code>-</code> \u8fd0\u7b97\u7b26</li> <li><code>__rsub</code>: Python <code>-</code> \u53cd\u5411\u8fd0\u7b97</li> <li><code>__mul</code>: Python <code>*</code> \u8fd0\u7b97\u7b26</li> <li><code>__rmul</code>: Python <code>*</code> \u53cd\u5411\u8fd0\u7b97</li> <li><code>__truediv</code>: Python <code>/</code> \u8fd0\u7b97\u7b26\uff0c\u8fd9\u662f Python \u7684 truediv \u64cd\u4f5c\u7b26\uff0c\u5b83\u5c06\u786e\u4fdd\u53d1\u751f\u6574\u6570\u771f\u9664\u6cd5</li> <li><code>__rtruediv</code>: Python <code>/</code> \u53cd\u5411\u8fd0\u7b97</li> <li><code>__floordiv</code>: Python <code>//</code> operator\uff0c\u8fd9\u662f Python \u7684 floordiv \u8fd0\u7b97\u7b26\uff0c\u5b83\u5c06\u786e\u4fdd\u53d1\u751f\u5e95\u9664</li> <li><code>__rfloordiv</code>: Python <code>//</code> \u53cd\u5411\u8fd0\u7b97</li> <li><code>__mod</code>: Python <code>%</code> \u8fd0\u7b97\u7b26</li> <li><code>__rmod</code>: Python <code>%</code> \u53cd\u5411\u8fd0\u7b97</li> </ul>"},{"location":"advanced/filter/#betweeninnot-in","title":"BETWEEN\u3001IN\u3001NOT IN","text":"<p>Note</p> <p>\u8fd0\u7b97\u7b26\u9700\u8981\u591a\u4e2a\u503c\uff0c\u4e14\u4ec5\u5141\u8bb8\u5143\u7ec4\uff0c\u5217\u8868\uff0c\u96c6\u5408</p> __between<pre><code># \u83b7\u53d6\u5e74\u9f84\u5728 30 - 40 \u5c81\u4e4b\u95f4\u4e14\u540d\u5b57\u5728\u76ee\u6807\u5217\u8868\u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    age__between=[30, 40],\n    name__in=['bob', 'lucy'],\n)\n</code></pre>"},{"location":"advanced/filter/#and","title":"AND","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u5c06\u591a\u4e2a\u8fc7\u6ee4\u5668\u94fe\u63a5\u5728\u4e00\u8d77\u6765\u5b9e\u73b0 AND \u5b50\u53e5</p> <pre><code># \u83b7\u53d6\u5e74\u9f84\u5728 30 \u4ee5\u4e0a\uff0c\u85aa\u8d44\u5927\u4e8e 20k \u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    age__gt=30,\n    payroll__gt=20000,\n)\n</code></pre>"},{"location":"advanced/filter/#or","title":"OR","text":"<p>Note</p> <p>\u6bcf\u4e2a\u952e\u90fd\u5e94\u662f\u5e93\u5df2\u652f\u6301\u7684\u8fc7\u6ee4\u5668\uff0c\u4ec5\u5141\u8bb8\u5b57\u5178</p> __or<pre><code># \u83b7\u53d6\u5e74\u9f84\u5728 40 \u5c81\u4ee5\u4e0a\u6216 30 \u5c81\u4ee5\u4e0b\u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    age__or={'gt': 40, 'lt': 30},\n)\n</code></pre>"},{"location":"advanced/filter/#mor","title":"MOR","text":"<p>Note</p> <p><code>or</code> \u8fc7\u6ee4\u5668\u7684\u9ad8\u7ea7\u7528\u6cd5\uff0c\u6bcf\u4e2a\u952e\u90fd\u5e94\u662f\u5e93\u5df2\u652f\u6301\u7684\u8fc7\u6ee4\u5668\uff0c\u4ec5\u5141\u8bb8\u5b57\u5178</p> __mor<pre><code># \u83b7\u53d6\u5e74\u9f84\u7b49\u4e8e 30 \u5c81\u6216 40 \u5c81\u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    age__mor={'eq': [30, 40]},  # (1)\n)\n</code></pre> <ol> <li>\u539f\u56e0\uff1a\u5728 python \u5b57\u5178\u4e2d\uff0c\u4e0d\u5141\u8bb8\u5b58\u5728\u76f8\u540c\u7684\u952e\u503c\uff1b    \u573a\u666f\uff1a\u6211\u6709\u4e00\u4e2a\u5217\uff0c\u9700\u8981\u591a\u4e2a\u76f8\u540c\u6761\u4ef6\u4f46\u4e0d\u540c\u6761\u4ef6\u503c\u7684\u67e5\u8be2\uff0c\u6b64\u65f6\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528 <code>mor</code> \u8fc7\u6ee4\u5668\uff0c\u6b63\u5982\u6b64\u793a\u4f8b\u4e00\u6837\u4f7f\u7528\u5b83</li> </ol>"},{"location":"advanced/filter/#gor","title":"GOR","text":"<p>Note</p> <p><code>or</code> \u8fc7\u6ee4\u5668\u7684\u66f4\u9ad8\u7ea7\u7528\u6cd5\uff0c\u6bcf\u4e2a\u503c\u90fd\u5e94\u662f\u4e00\u4e2a\u5df2\u53d7\u652f\u6301\u7684\u6761\u4ef6\u8fc7\u6ee4\u5668\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u7ec4</p> __gor__<pre><code># \u83b7\u53d6\u5e74\u9f84\u5728 30 - 40 \u5c81\u4e4b\u95f4\u6216\u85aa\u8d44\u5927\u4e8e 20k \u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    __gor__=[\n        {'age__between': [30, 40]},\n        {'payroll__gt': 20000}\n    ]\n)\n</code></pre>"},{"location":"advanced/filter/#_7","title":"\u7b97\u6570","text":"<p>Note</p> <p>\u6b64\u8fc7\u6ee4\u5668\u5fc5\u987b\u4f20\u9012\u5b57\u5178\uff0c\u4e14\u5b57\u5178\u7ed3\u6784\u5fc5\u987b\u4e3a <code>{'value': xxx, 'condition': {'\u5df2\u652f\u6301\u7684\u8fc7\u6ee4\u5668': xxx}}</code></p> <p><code>value</code>\uff1a\u6b64\u503c\u5c06\u4e0e\u5217\u503c\u8fdb\u884c\u8fd0\u7b97</p> <p><code>condition</code>\uff1a\u6b64\u503c\u5c06\u4f5c\u4e3a\u8fd0\u7b97\u540e\u7684\u6bd4\u8f83\u503c\uff0c\u6bd4\u8f83\u6761\u4ef6\u53d6\u51b3\u4e8e\u4f7f\u7528\u7684\u8fc7\u6ee4\u5668</p> <pre><code># \u83b7\u53d6\u85aa\u8d44\u6253\u516b\u6298\u4ee5\u540e\u4ecd\u9ad8\u4e8e 20k \u7684\u5458\u5de5\nitems = await item_crud.select_models(\n    session=db,\n    payroll__mul={'value': 0.8, 'condition': {'gt': 20000}},\n)\n</code></pre>"},{"location":"advanced/flush/","title":"\u51b2\u6d17","text":""},{"location":"advanced/flush/#flush","title":"<code>flush()</code>","text":"<ul> <li><code>flush</code> \u662f\u5c06\u66f4\u6539\u4ece Python \u79fb\u52a8\u5230\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u7f13\u51b2\u533a</li> <li>\u5b83\u4f1a\u751f\u6210\u5fc5\u8981\u7684 SQL \u8bed\u53e5\u5e76\u53d1\u9001\u5230\u6570\u636e\u5e93\u6267\u884c\uff0c\u4f46\u4e0d\u4f1a\u63d0\u4ea4\uff08commit\uff09\u4e8b\u52a1</li> <li>\u5728 <code>flush</code> \u4e4b\u540e\uff0c\u6570\u636e\u4f1a\u88ab\u5199\u5165\u6570\u636e\u5e93\uff0c\u4f46\u4e8b\u52a1\u4f9d\u7136\u662f\u6d3b\u8dc3\u7684\uff08\u672a\u63d0\u4ea4\uff09\uff0c\u9664\u975e\u53d1\u751f\u9519\u8bef\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u4e8b\u52a1\u5c06\u56de\u6eda\uff0c<code>flush</code>   \u7684\u66f4\u6539\u4e5f\u4f1a\u88ab\u64a4\u9500</li> </ul> <p>\u63d0\u793a</p> <p>\u5982\u679c\u4f60\u5728\u4e8b\u52a1\u63d0\u4ea4\u524d\u65e0\u9700\u5bf9\u65b0\u5b9e\u4f8b\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c<code>flush</code> \u662f\u6ca1\u5fc5\u8981\u7684\uff0c\u5728 <code>commit</code> \u65f6\uff0cSQLAlchemy \u4f1a\u9690\u5f0f\u5730\u8c03\u7528\u4e00\u6b21 <code>flush</code>\uff0c \u786e\u4fdd\u6240\u6709\u6302\u8d77\u7684\u66f4\u6539\u90fd\u88ab\u540c\u6b65\u5230\u6570\u636e\u5e93\uff0c\u7136\u540e\u63d0\u4ea4\u4e8b\u52a1</p>"},{"location":"advanced/primary_key/","title":"\u4e3b\u952e","text":"<p>Note</p> <p>\u7531\u4e8e\u5728 python \u5185\u90e8 id \u7684\u7279\u6b8a\u6027\uff0c\u6211\u4eec\u8bbe\u5b9a pk (\u53c2\u8003 Django) \u4f5c\u4e3a\u6a21\u578b\u4e3b\u952e\u547d\u540d\uff0c\u6240\u4ee5\u5728 crud \u65b9\u6cd5\u4e2d\uff0c\u4efb\u4f55\u6d89\u53ca\u5230\u4e3b\u952e\u7684\u5730\u65b9\uff0c\u5165\u53c2\u90fd\u4e3a <code>pk</code></p> e.g.<pre><code>async def delete(self, db: AsyncSession, primary_key: int) -&gt; int:\n    return self.delete_model(db, pk=primary_key)\n</code></pre>"},{"location":"advanced/primary_key/#_1","title":"\u4e3b\u952e\u5b9a\u4e49","text":"<p>Tip</p> <p>\u6211\u4eec\u5728 SQLAlchemy CRUD Plus \u5185\u90e8\u901a\u8fc7 inspect() \u81ea\u52a8\u641c\u7d22\u8868\u4e3b\u952e\uff0c \u800c\u975e\u5f3a\u5236\u7ed1\u5b9a\u4e3b\u952e\u5217\u5fc5\u987b\u547d\u540d\u4e3a id\uff0c\u611f\u8c22 @DavidSche \u63d0\u4f9b\u5e2e\u52a9 </p> e.g.<pre><code>class ModelIns(Base):\n    # your sqlalchemy model\n    # define your primary_key\n    custom_id: Mapped[int] = mapped_column(primary_key=True, index=True, autoincrement=True)\n</code></pre>"},{"location":"usage/create_model/","title":"\u5355\u6761","text":"<pre><code>async def create_model(\n    self,\n    session: AsyncSession,\n    obj: CreateSchema,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; Model:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> </ul> <p>\u5173\u952e\u5b57\u53c2\u6570</p> <p>\u9664\u4e86\u5fc5\u987b\u4f20\u5165 obj schema \u5916\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5173\u952e\u5b57\u5165\u53c2\uff0c\u4f20\u5165\u975e schema \u53c2\u6570\uff0c\u6bd4\u5982\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7279\u5b9a\u573a\u666f\uff0c\u5176\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u5e76\u4e0d\u662f\u901a\u7528\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u8fdb\u884c\u8f93\u5165\u63a7\u5236\uff0c\u53ea\u9700\u5728\u5199\u5165\u65f6\u8d4b\u4e88\u6307\u5b9a\u503c\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u5165\u53c2\u5373\u53ef</p> <p>e.g.</p> <pre><code>async def create(self, obj: CreateIns) -&gt; None:\n    async with async_db_session.begin() as db:\n        await self.create_model(db, obj, status=1)  # (1)\n</code></pre> <ol> <li>\u5728\u6570\u636e\u88ab\u6700\u7ec8\u5199\u5165\u524d\uff0c\u6240\u6709\u5165\u53c2\uff08schema \u548c\u5173\u952e\u5b57\u53c2\u6570\uff09\u90fd\u4f1a\u8d4b\u503c\u7ed9 SQLAlchemy \u6a21\u578b\uff0c\u5373\u4fbf\u4f60\u4f20\u5165\u4e86\u975e\u6a21\u578b\u6570\u636e\uff0c    \u8fd9\u4e5f\u662f\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u88ab\u6a21\u578b\u6240\u5f15\u7528</li> </ol>"},{"location":"usage/create_model/#_1","title":"\u793a\u4f8b","text":"create_model<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CreateIns(BaseModel):\n    # your pydantic schema\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession, obj: CreateIns) -&gt; ModelIns:\n        return await self.create_model(db, obj)\n</code></pre>"},{"location":"usage/create_models/","title":"\u591a\u6761","text":"<pre><code>async def create_models(\n    self,\n    session: AsyncSession,\n    objs: Iterable[CreateSchema],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; list[Model]:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> <li>\u6b64\u65b9\u6cd5\u8fd8\u63d0\u4f9b\u4e0e <code>create_model()</code> \u76f8\u540c\u7528\u6cd5\u7684\u5173\u952e\u5b57\u53c2\u6570\uff0c\u9700\u8981\u989d\u5916\u6ce8\u610f\u7684\u662f\uff0c<code>create_models()</code> \u4f1a\u5c06\u5173\u952e\u5b57\u53c2\u6570\u5199\u5165\u6bcf\u4e2a\u5b9e\u4f8b\u4e2d</li> </ul>"},{"location":"usage/create_models/#_1","title":"\u793a\u4f8b","text":"create_models<pre><code>from typing import Iterable\n\nfrom pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CreateIns(BaseModel):\n    # your pydantic schema\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def creates(self, db: AsyncSession, objs: Iterable[CreateIns]) -&gt; list[ModelIns]:  # (1)\n        return await self.create_models(db, objs)\n</code></pre> <ol> <li>objs \u5fc5\u987b\u662f\u4e00\u4e2a schema \u5217\u8868</li> </ol>"},{"location":"usage/delete_model/","title":"\u4e3b\u952e ID","text":"<pre><code>async def delete_model(\n    self,\n    session: AsyncSession,\n    pk: int,\n    flush: bool = False,\n    commit: bool = False,\n) -&gt; int:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u4f7f\u7528\u4e3b\u952e <code>pk</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u4e3b\u952e</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> </ul>"},{"location":"usage/delete_model/#_1","title":"\u793a\u4f8b","text":"delete_model<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import Mapped, mapped_column\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    # define your primary_key\n    custom_id: Mapped[int] = mapped_column(primary_key=True, index=True, autoincrement=True)\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def delete(self, db: AsyncSession, pk: int) -&gt; int:\n        return await self.delete_model(db, pk)\n</code></pre>"},{"location":"usage/delete_model_by_column/","title":"\u9ad8\u7ea7\u7528\u6cd5","text":"<pre><code>async def delete_model_by_column(\n    self,\n    session: AsyncSession,\n    allow_multiple: bool = False,\n    logical_deletion: bool = False,\n    deleted_flag_column: str = 'del_flag',\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> <li>\u6b64\u65b9\u6cd5\u53ef\u7ed3\u5408 \u9ad8\u7ea7\u8fc7\u6ee4\u5668 \u4f7f\u7528</li> </ul>"},{"location":"usage/delete_model_by_column/#_1","title":"\u5220\u9664\u591a\u6761","text":"<p>\u5c06\u53c2\u6570 <code>allow_multiple</code> \u8bbe\u7f6e\u4e3a True\uff0c\u5c06\u5141\u8bb8\u5220\u9664\u591a\u6761\u8bb0\u5f55\uff0c\u5220\u9664\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u540e\u7684\u6570\u636e</p>"},{"location":"usage/delete_model_by_column/#_2","title":"\u8f6f\u5220\u9664","text":"<p>\u6b64\u65b9\u6cd5\u540c\u65f6\u63d0\u4f9b\u903b\u8f91\u5220\u9664\uff0c\u5c06\u53c2\u6570 <code>logical_deletion</code> \u8bbe\u7f6e\u4e3a True\uff0c\u5c06\u4e0d\u4f1a\u4ece\u6570\u636e\u5e93\u4e2d\u76f4\u63a5\u5220\u9664\u6570\u636e\uff0c\u800c\u662f\u901a\u8fc7\u66f4\u65b0\u7684\u65b9\u5f0f\uff0c \u5c06\u6570\u636e\u5e93\u5220\u9664\u6807\u5fd7\u5b57\u6bb5\u7684\u503c\u8fdb\u884c\u66f4\u65b0\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>deleted_flag_column</code> \u53c2\u6570\u8bbe\u7f6e\u6307\u5b9a\u903b\u8f91\u5220\u9664\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a <code>del_flag</code></p> <p>Tip</p> <p>\u903b\u8f91\u5220\u9664\u4e5f\u5141\u8bb8\u540c\u65f6\u5220\u9664\u591a\u6761\uff0c\u540c\u6837\u7531\u53c2\u6570 <code>allow_multiple</code> \u548c\u8fc7\u6ee4\u5668\u63a7\u5236</p>"},{"location":"usage/delete_model_by_column/#_3","title":"\u793a\u4f8b","text":"delete_model_by_column<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def delete(self, db: AsyncSession) -&gt; int:\n        return await self.delete_model_by_column(db, name=\"foo\")\n</code></pre>"},{"location":"usage/select/","title":"Select","text":"<pre><code>async def select(self, **kwargs) -&gt; Select:\n    ...\n</code></pre> <p>\u6b64\u65b9\u6cd5\u7528\u4e8e\u6784\u9020 SQLAlchemy Select\uff0c\u5728\u4e00\u4e9b\u7279\u5b9a\u573a\u666f\u5c06\u4f1a\u5f88\u6709\u7528\uff0c\u6bd4\u5982\uff0c\u914d\u5408 fastapi-pagination \u4f7f\u7528</p>"},{"location":"usage/select/#_1","title":"\u793a\u4f8b","text":"<pre><code>from typing import Any, Annotated\n\nfrom fastapi import Depends, FastAPI, Query\nfrom pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import select, Select\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom fastapi_pagination import LimitOffsetPage, Page, add_pagination\nfrom fastapi_pagination.ext.sqlalchemy import paginate\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass UserOut(BaseModel):\n    # your pydantic schema\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def get_list(self, name: str = None, method: str = None) -&gt; Select:\n        return await self.select(name__like=f'%{name}%', method=method)\n\n\ncrud_ins = CRUDIns(ModelIns)\n\n\napp = FastAPI()\nadd_pagination(app)\n\n\n@app.get(\"/users\", response_model=Page[UserOut])\nasync def get_users(\n    db: AsyncSession = Depends(get_db),\n    name: Annotated[str | None, Query()] = None,\n    method: Annotated[str | None, Query()] = None,\n) -&gt; Any:\n    select = await crud_ins.get_list()\n    return await paginate(db, select)\n</code></pre>"},{"location":"usage/select_model/","title":"\u4e3b\u952e ID","text":"<pre><code>async def select_model(self, session: AsyncSession, pk: int) -&gt; Model | None:\n</code></pre> <p>\u6b64\u65b9\u6cd5\u4f7f\u7528\u4e3b\u952e <code>pk</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u4e3b\u952e</p>"},{"location":"usage/select_model/#_1","title":"\u793a\u4f8b","text":"select_model<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import Mapped, mapped_column\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    # define your primary_key\n    custom_id: Mapped[int] = mapped_column(primary_key=True, index=True, autoincrement=True)\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def select(self, db: AsyncSession, pk: int) -&gt; ModelIns:\n        return await self.select_model(db, pk)\n</code></pre>"},{"location":"usage/select_model_by_column/","title":"\u6761\u4ef6\u8fc7\u6ee4","text":"<pre><code>async def select_model_by_column(self, session: AsyncSession, **kwargs) -&gt; Model | None:\n</code></pre> <p>\u6b64\u65b9\u6cd5\u53ef\u7ed3\u5408 \u9ad8\u7ea7\u8fc7\u6ee4\u5668 \u4f7f\u7528</p>"},{"location":"usage/select_model_by_column/#_1","title":"\u793a\u4f8b","text":"select_model_by_cloumn<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession) -&gt; ModelIns:\n        return await self.select_model_by_column(db, name=\"foo\")\n</code></pre>"},{"location":"usage/select_models/","title":"\u5217\u8868","text":"<pre><code>async def select_models(self, session: AsyncSession, **kwargs) -&gt; Sequence[Row[Any] | RowMapping | Any]:\n</code></pre> <p>\u6b64\u65b9\u6cd5\u53ef\u7ed3\u5408 \u9ad8\u7ea7\u8fc7\u6ee4\u5668 \u4f7f\u7528</p>"},{"location":"usage/select_models/#_1","title":"\u793a\u4f8b","text":"select_models<pre><code>from typing import Sequence\n\nfrom pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession) -&gt; Sequence[ModelIns]:\n        return await self.select_models(db)\n</code></pre>"},{"location":"usage/select_models_order/","title":"\u5217\u8868\u6392\u5e8f","text":"<pre><code> async def select_models_order(\n     self,\n     session: AsyncSession,\n     sort_columns: str | list[str],\n     sort_orders: str | list[str] | None = None,\n     **kwargs,\n) -&gt; Sequence[Row | RowMapping | Any] | None:\n</code></pre> <p>\u6b64\u65b9\u6cd5\u53ef\u7ed3\u5408 \u9ad8\u7ea7\u8fc7\u6ee4\u5668 \u4f7f\u7528</p>"},{"location":"usage/select_models_order/#_1","title":"\u6392\u5e8f","text":"<p>\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u6d89\u53ca\u6b64\u65b9\u6cd5\u7684\u4e24\u4e2a\u5b57\u6bb5</p> <ol> <li> <p><code>sort_columns</code>\uff1a\u5e94\u7528\u6392\u5e8f\u7684\u5355\u4e2a\u5217\u540d\u6216\u5217\u540d\u5217\u8868</p> </li> <li> <p><code>sort_orders</code>\uff1a\u5355\u4e2a\u6392\u5e8f\u987a\u5e8f\uff08<code>asc</code> \u6216 <code>desc</code>\uff09\u6216\u4e0e <code>sort_columns</code> \u4e2d\u7684\u5217\u76f8\u5bf9\u5e94\u7684\u6392\u5e8f\u987a\u5e8f\u5217\u8868\u3002    \u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u9ed8\u8ba4\u6bcf\u5217\u7684\u6392\u5e8f\u987a\u5e8f\u4e3a <code>asc</code></p> </li> </ol>"},{"location":"usage/select_models_order/#_2","title":"\u793a\u4f8b","text":"select_models_order<pre><code>from typing import Sequence\n\nfrom pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession) -&gt; Sequence[ModelIns]:\n        return await self.select_models_order(db, sort_columns=['name', 'age'], sort_orders=['asc', 'desc'])\n</code></pre>"},{"location":"usage/select_order/","title":"Select \u6392\u5e8f","text":"<pre><code>async def select_order(\n    self,\n    sort_columns: str | list[str],\n    sort_orders: str | list[str] | None = None,\n    **kwargs,\n) -&gt; Select:\n</code></pre> <p>\u6b64\u65b9\u6cd5\u4e0e select \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u589e\u52a0\u4e86 \u6392\u5e8f \u529f\u80fd</p>"},{"location":"usage/update_model/","title":"\u4e3b\u952e ID","text":"<pre><code>async def update_model(\n    self,\n    session: AsyncSession,\n    pk: int,\n    obj: UpdateSchema | dict[str, Any],\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u4f7f\u7528\u4e3b\u952e <code>pk</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u4e3b\u952e</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> <li>\u6b64\u65b9\u6cd5\u8fd8\u63d0\u4f9b\u4e0e <code>create_model()</code> \u76f8\u540c\u7528\u6cd5\u7684\u5173\u952e\u5b57\u53c2\u6570</li> </ul>"},{"location":"usage/update_model/#_1","title":"\u793a\u4f8b","text":"update_model<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import Mapped, mapped_column\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    # define your primary_key\n    custom_id: Mapped[int] = mapped_column(primary_key=True, index=True, autoincrement=True)\n\n\nclass UpdateIns(BaseModel):\n    # your pydantic schema\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession, pk: int, obj: UpdateIns) -&gt; int:\n        return await self.update_model(db, pk, obj)\n</code></pre>"},{"location":"usage/update_model_by_column/","title":"\u9ad8\u7ea7\u7528\u6cd5","text":"<pre><code>async def update_model_by_column(\n    self,\n    session: AsyncSession,\n    obj: UpdateSchema | dict[str, Any],\n    allow_multiple: bool = False,\n    flush: bool = False,\n    commit: bool = False,\n    **kwargs,\n) -&gt; int:\n</code></pre> <ul> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>flush</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u51b2\u6d17</li> <li>\u6b64\u65b9\u6cd5\u63d0\u4f9b <code>commit</code> \u53c2\u6570\uff0c\u8be6\u89c1\uff1a\u63d0\u4ea4</li> <li>\u6b64\u65b9\u6cd5\u53ef\u7ed3\u5408 \u9ad8\u7ea7\u8fc7\u6ee4\u5668 \u4f7f\u7528</li> </ul>"},{"location":"usage/update_model_by_column/#_1","title":"\u66f4\u65b0\u591a\u6761","text":"<p>\u5c06\u53c2\u6570 <code>allow_multiple</code> \u8bbe\u7f6e\u4e3a True\uff0c\u5c06\u5141\u8bb8\u66f4\u65b0\u591a\u6761\u8bb0\u5f55\uff0c\u66f4\u65b0\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u540e\u7684\u6570\u636e</p>"},{"location":"usage/update_model_by_column/#_2","title":"\u793a\u4f8b","text":"update_model_by_columnn<pre><code>from pydantic import BaseModel\n\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom sqlalchemy import DeclarativeBase as Base\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\n\nclass ModelIns(Base):\n    # your sqlalchemy model\n    pass\n\n\nclass UpdateIns(BaseModel):\n    # your pydantic schema\n    pass\n\n\nclass CRUDIns(CRUDPlus[ModelIns]):\n    async def create(self, db: AsyncSession, obj: UpdateIns) -&gt; int:\n        return await self.update_model_by_column(db, obj, name=\"foo\")\n</code></pre>"}]}